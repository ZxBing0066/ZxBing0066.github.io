<!--
    Powered By nodePPT - This is probably the best web presentation tool so far!
    version: 0.9.5
    site: https://github.com/ksky521/nodePPT
-->
<!doctype html>
<html>
<head>
    <meta charset="UTF-8">
    <title>lizard 分享 - By 王兵兵</title>
    <link rel="stylesheet" media="all" href="./css/nodeppt2.0.css">
    <link rel="stylesheet" media="only screen and (max-device-width: 480px)" href="./css/phone.css">
    <link rel="stylesheet" media="print" href="./css/pdf.css">
    <link rel="stylesheet" href="./js/highlight/styles/monokai_sublime.css">
    <link rel="stylesheet" href="./css/font-awesome.css">
</head>
<body>
<div class="slides">
    <slides id="container">
        <slide class="slide" data-transition="zoomin"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>Lizard 分享</h1>
<h2><code>Lizard</code> 中的<em><code>cModel</code></em>&amp;<em><code>cStore</code></em></h2>
<p><small>演讲者: 王兵兵</small></p>
<footer><small>Power by <a href="https://github.com/ksky521/nodePPT" target="_blank">nodeppt</a></small></footer>
</article></section></slide>
<slide class="slide" data-transition="horizontal3d"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>cModel</h1>
<p><code>cModel</code>类中封装了一系列的<em><code>ajax</code></em>请求的常用方法.</p>
<p>主要用于继承,不会单独使用.</p>

</article></section></slide>
<slide class="slide" data-transition="circle"><section class="slide-wrapper"><article>
<h2>cModel中的一些基本参数</h2>
<pre class="code_container_h500 moveIn">
<code class="javascript">/**
* {Boolean} 可覆盖，提交参数是否加入head
*/
this.usehead = true;
//head数据
this.head = CommonStore.HeadStore.getInstance();
/**
* {Store} 可选，
*/
this.result = null;

// @description 替代headstore信息的headinfo
this.headinfo = null;

// @param {Boolean} 可选，只通过ajax获取数据，不做localstorage数据缓存
this.ajaxOnly = false;

//@param {Boolean} 可选，是否是用户相关数据
this.isUserData = false;

// request中的数据
this.param = {};

// 协议
this.protocol = "http";
</code>
</pre>
</article></section></slide>
<slide class="slide" data-transition="circle"><section class="slide-wrapper"><article>
<h2>cModel中的一些常用方法</h2>
<pre class="code_container_h500 moveIn">
<code class="javascript">setHead: function(head) {
  if (!head instanceof AbstractStore) {
    throw 'Set head is not a store';
  }
  this.head = head;
},
getHead: function() {
  return this.head;
},
/**
 *  获得参数存储器
 */
getParamStore: function() {
  return this.param;
},
/**
 * 设置参数存取器
 */
setParamStore: function(param) {
  if (typeof param !== 'object') throw 'Set param is not a store';
  this.param = param;
},
/**
 *  获得结果存储器
 */
getResultStore: function() {
  return this.result;
},
//     设置结果存取器
setResultStore: function(result) {
  if (typeof result !== 'object') throw 'Set result is not a store';
  this.result = result;
},
/**
 * 清空结果数据
 */
clearResult: function() {
  if (this.result && typeof this.result.remove === 'function') {
    this.result.remove();
  }
},
/**
 * 重写父类
 *  设置提交参数
 *  @param {String} param 提交参数
 *  @return void
 */
setParam: function(key, val) {
  var param = {};
  if (typeof key === 'object' && !val) {
    param = key;
  } else {
    param[key] = val;
  }
  for (var i in param) {
    if (this.param instanceof AbstractStore) {
      this.param.setAttr(i, param[i]);
    } else {
      cObject.set(this.param, i, param[i]);
    }
  }
},
//重写父类
getParam: function() {
  return this.param instanceof AbstractStore ? this.param.get() : this.param;
},
buildurl: function() {
  if (cUtility.validate.isUrl(this.url)) {
    return this.url.replace(this.urlParseRet.hostname, this.baseurl.domain);
  } else {
    return this.protocol + '://' + this.baseurl.domain + '/' + this.baseurl.path + (typeof this.url === 'function' ? this.url() : this.url);
  }
},
<!-- 后面细说 -->
excute: function(onComplete, onError, ajaxOnly, scope, onAbort) {

}
</code>
</pre>
</article></section></slide>
<slide class="slide" data-transition="circle"><section class="slide-wrapper"><article>
<h2>使用cModel</h2>
<h3>定义一个新的<code>model</code>类</h3>
<pre class="code_container_h moveIn">
<code class="javascript">define(["cModel"], function(cModel) {
})
</code>
</pre>

<h3>继承&amp;扩展<code>cModel</code></h3>
<pre class="code_container_h300 moveIn">
<code class="javascript">var _GetWayModel = new cBase.Class(cModel, {
  __propertys__: function() {
    <!-- 用于生成url -->
    var urlinfo = {
      test: {
        domain: 'gateway.m.fws.qa.nt.ctripcorp.com',
        path: 'restapi/soa2/10419/json/'
      },
      pro: {
        domain: 'm.ctrip.com',
        path: 'restapi/soa2/10419/json/'
      }
    };
    this.baseurl = getBaseUrl(urlinfo);
    this.param = {};
  },
  initialize: function($super, options) {
    $super(options);
  },
  /**
   * 重写_buildurl函数
   * @return {String} 构建后的url
   */
  _buildurl: function() {
    return this.protocol + '://' + this.baseurl.domain + '/' + this.baseurl.path + (typeof this.url === 'function' ? this.url() : this.url) + util.paramStringify(this.param);
  },
  /**
   * 重写excute,因为经常需要同时在success和error函数里写hideloading操作,所以添加onalways
   * @param  {Fun} onsuccess 执行成功的操作
   * @param  {Fun} onerror   执行失败的操作
   * @param  {Fun} onalways  无论成功与否都执行的
   * @param  {Obj} self      上下文
   */
  mallExcute: function(onsuccess, onerror, onalways, self) {
    this.excute(function(json) {
      onalways && onalways();
      onsuccess && onsuccess(json);
    }, function(error) {
      onalways && onalways();
      onerror && onerror(error);
    }, false, self);
  }
});
</code>
</pre>
</article></section></slide>
<slide class="slide" data-transition="horizontal3d"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>cStore</h1>
<p><code>cStore</code>类中封装了一系列操作<em><code>localStorage</code></em>的常用方法.</p>

</article></section></slide>
<slide class="slide" data-transition="circle"><section class="slide-wrapper"><article>
<h2>localStorage</h2>
<p><code>localStorage</code>是一个<code>HTML5</code>中提供的新的没有时间限制的客户端存储数据的方法.</p>
<p>H5还提供了<code>sessionStorage</code>用于对<code>session</code>进行数据存储.</p>
<p>在此之前这些都是用<code>cookie</code>来完成的,但是<code>cookie</code>有些局限性,如不适合大量数据的存储,效率不高等~</p>
<p>使用<code>localStorage</code>可以避免<code>cookie</code>的这些缺陷.</p>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2><code>cStore</code>中的一些基本参数</h2>
<pre class="code_container_h500 zoomIn">
<code class="javascript">
this.key = this.NULL;
/**
 * @member lifeTime
 * @type {String}
 * @description 数据存活时间, 参数传递格式为“时间+时间单位",如30M
 * 时间单位有D:day,H:hour,M:minutes,S:secend,
 * 如过不传递时间单位,默认时间单位为M
 */
this.lifeTime = '30M';
</code>
</pre>
</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2><code>cStore</code>中的一些常用方法</h2>
<pre class="code_container_h500 zoomIn">
<code class="javascript">set: function (value, tag, oldVal) {
},
setLifeTime: function (lifeTime, override) {
},
setAttr: function (attrName, attrVal, tag) {
},
get: function (tag, oldFlag) {
},
getAttr: function (attrName, tag) {
},
getTag: function () {
},
remove: function () {
},
removeAttr: function (attrName) {
}
</code>
</pre>
</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>使用<code>cStroe</code></h2>
<h3>定义一个新的<code>store</code>类</h3>
<pre class="code_container_h zoomIn">
<code class="javascript">define(["cStore"], function(cStore) {
})
</code>
</pre>

<h3>继承&amp;扩展<code>cStore</code></h3>
<p>简单用法:</p>
<pre class="code_container_h200 zoomIn">
<code class="javascript">_ret.CustomStore = function(key, lifeTime) { //自定义
  return new cBase.Class(cStore, {
    __propertys__: function() {
      this.key = key;
      this.lifeTime = lifeTime;
    },
    initialize: function($super, options) {
      $super(options)
    }
  })
};
_ret.ItemBaseInfoStore = _ret.CustomStore("MALL_ITEM_BASE_INFO", "1D");
</code>
</pre>

<p>扩展用法</p>
<pre class="code_container_h200 zoomIn">
<code class="javascript">_ret.LocalShoppingCartStore = new cb.Class(_base, {
  __propertys__: function() {
    this.key = "MALL_LOCAL_SHOPPING_CART";
    this.lifeTime = "2D";
  },
  initialize: function($super, options) {
    $super(options)
  },
  getNum: function(siteId) {
    var num = 0,
      items = this.getItems(siteId);
    if (!items) {
      return 0;
    }
    for (var i = 0; i < items.length; i++) {
      num += items[i].Quantity;
    };
    return num;
  }
})
</code>
</pre>
</article></section></slide>
<slide class="slide" data-transition="horizontal3d"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>cStore+cModel</h1>
<p>使用<code>cStore</code>来实现<code>cModel</code>的接口缓存</p>
<p>将接口返回的数据经过处理后放入<code>localStorage</code>中实现接口缓存,减少重复请求次数</p>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2><code>execute</code>函数</h2>
<p>执行<code>ajax</code>请求的函数</p>
<pre class="code_container_h500 fadeIn">
<code class="javascript">/**
 * 取model数据
 * @param {Function} onComplete 取完的回调函
 * 传入的第一个参数为model的数第二个数据为元数据，元数据为ajax下发时的ServerCode,Message等数
 * @param {Function} onError 发生错误时的回调
 * @param {Boolean} ajaxOnly 可选，默认为false当为true时只使用ajax调取数据
 * @param {Boolean} scope 可选，设定回调函数this指向的对象
 * @param {Function} onAbort 可选，但取消时会调用的函数
 */
function execute(onComplete, onError, scope, onAbort, params) {

  // @description 定义是否需要退出ajax请求
  this.isAbort = false;

  // @description 请求数据的地址
  var url = this.buildurl();

  var self = this;

  var __onComplete = $.proxy(function(data) {
    //保存服务请求日志
    // cLog.serverLog(self.buildurl(), self.getParam(), data);

    if (this.validates && this.validates.length > 0) {

      // @description 开发者可以传入一组验证方法进行验证
      for (var i = 0, len = this.validates.length; i < len; i++) {
        if (!this.validates[i](data)) {

          // @description 如果一个验证不通过就返回
          if (typeof onError === 'function') {
            return onError.call(scope || this, data);
          } else {
            return false;
          }
        }
      }
    }

    // @description 对获取的数据做字段映射
    var datamodel = typeof this.dataformat === 'function' ? this.dataformat(data) : data;

    if (typeof this.onBeforeCompleteCallback === 'function') {
      this.onBeforeCompleteCallback(datamodel);
    }

    if (typeof onComplete === 'function') {
      onComplete.call(scope || this, datamodel, data);
    }

  }, this);

  var __onError = $.proxy(function(e) {
    //保存服务请求日志
    // cLog.serverLog(self.buildurl(), self.getParam());
    if (self.isAbort) {
      self.isAbort = false;

      if (typeof onAbort === 'function') {
        return onAbort.call(scope || this, e);
      } else {
        return false;
      }
    }

    if (typeof onError === 'function') {
      onError.call(scope || this, e);
    }

  }, this);

  // @description 从this.param中获得数据，做深copy
  var params = params || _.clone(this.getParam() || {});

  //设置contentType无效BUG，改动一，将contentType保存
  params.contentType = this.contentType;

  if (this.contentType === AbstractModel.CONTENT_TYPE_JSON) {

    // @description 跨域请求
    return this.ajax = cAjax.cros(url, this.method, params, __onComplete, __onError);
  } else if (this.contentType === AbstractModel.CONTENT_TYPE_JSONP) {

    // @description jsonp的跨域请求
    return this.ajax = cAjax.jsonp(url, params, __onComplete, __onError);
  } else {

    // @description 默认post请求
    return this.ajax = cAjax.post(url, params, __onComplete, __onError);
  }
}
</code>
</pre>
</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2><code>excute</code>函数</h2>
<p>对<code>execute</code>的封装</p>
<p>将head信息添加到request中,并添加了接口缓存以及缓存数据tag判断等功能</p>
<pre class="code_container_h500 fadeIn">
<code class="javascript">/**
*  取model数据
*  @param {Function} onComplete 取完的回调函
*  传入的第一个参数为model的数第二个数据为元数据，元数据为ajax下发时的ServerCode,Message等数
*  @param {Function} onError 发生错误时的回调
*  @param {Boolean} ajaxOnly 可选，默认为false当为true时只使用ajax调取数据
*   @param {Boolean} scope 可选，设定回调函数this指向的对象
*   @param {Function} onAbort 可选，但取消时会调用的函数
*/
function excute(onComplete, onError, ajaxOnly, scope, onAbort) {

  var params = _.clone(this.getParam() || {});

  //验证错误码，并且设置新的auth
  this.pushValidates(function(data) {
    var curhead = this.head.get();
    //兼容soa2.0 和 restful api
    var rsphead = this._getResponseHead(data);
    /* if (this.contentType !== AbstractModel.CONTENT_TYPE_JSONP && this.usehead && rsphead.auth && rsphead.auth !== curhead.auth) {
         this.head.setAuth(rsphead.auth);
     }*/
    return rsphead.success;
    //        var head = data.head;
    //        if (this.contentType !== AbstractModel.CONTENT_TYPE_JSONP && this.usehead && head.auth && head.auth !== curhead.auth) {
    //          this.head.setAuth(head.auth);
    //        }
    //        if (head && head.errcode === 0) {
    //          return true;
    //        } else {
    //          return false;
    //        }



  });

  // @description 业务相关，获得localstorage的tag
  var tag = this.getTag();
  // @description 业务相关，从localstorage中获取上次请求的数据缓存
  var cache = this.result && this.result.get(tag);

  if (!cache || this.ajaxOnly || ajaxOnly) {

    if (this.method.toLowerCase() !== 'get' && this.usehead && this.contentType !== AbstractModel.CONTENT_TYPE_JSONP) {
      //          this.setParam('head', this.head.get())
      params.head = this.head.get();
      params.head.time = (new Date()).getTime();
    } else if (this.method.toLowerCase() !== 'get' && !this.usehead && this.contentType !== AbstractModel.CONTENT_TYPE_JSONP) {
      if (this.headinfo) {
        //            this.setParam('head', this.headinfo);
        params.head = this.headinfo;

      }
    }

    this.onBeforeCompleteCallback = function(datamodel) {
      if (this.result instanceof AbstractStore) {
        //soa 数据量大,为精简locastorage,去掉ResponseStatus部分 shbzhang 2014.4.17
        try {
          //              if(datamodel.ResponseStatus){
          //                delete datamodel.ResponseStatus;
          //              }
        } catch (e) {

        }
        this.result.set(datamodel, tag);
      }
    }
    this.execute(onComplete, onError, scope, onAbort, params)

  } else {
    if (typeof onComplete === 'function') {
      onComplete.call(scope || this, cache);
    }
  }

}
</code>
</pre>
</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>使用方法</h1>
<p>定义<code>store</code></p>
<pre class="code_container_h fadeIn">
<code class="javascript">_ret.TestStore = _ret.CustomStore("MALL_LIZARD_STORE_TEST", "1D");
</code>
</pre>

<p>定义<code>model</code></p>
<pre class="code_container_h fadeIn">
<code class="javascript">_ret.getLocationList = new cBase.Class(_GetWayModel, {
  __propertys__: function() {
    this.url = 'GetCountrySubSiteInfoListData';
    this.result = Store.TestStore.getInstance();
  }
})
</code>
</pre>

<p>使用</p>
<pre class="code_container_h fadeIn">
<code class="javascript">getLocationListModel.setParam(request);
getLocationListModel.excute();
</code>
</pre>
</article></section></slide>
        <slide class="slide thank-you-slide segue nobackground">
            <article class="flexbox vleft auto-fadein">
                <h2>Q &amp; A</h2>
                <h3>&lt;Thank You!&gt;</h3>
            </article>
        </slide>
        <slide class="slide logoslide dark nobackground">
            <article class="flexbox vcenter">
              <h2 style="color: white;">Powered By nodePPT v0.9.5</h2>
            </article>
          </slide>
        <div class="slideTip" id="tip"></div>
    </slides>
</div>
<canvas id="drawBoard" class="draw-board" width="900" height="700"></canvas>
<div class="progress"><span id="progress"></span></div>
<div id="_buttons">
    <div class="_btn-box" id="_btn-box" style="display:none;">
        <button class="fa fa-arrow-circle-left" id="_btn-prev"></button>
        <button class="fa fa-arrow-circle-right" id="_btn-next"></button>
        <button class="fa fa-paint-brush" id="_btn-brush"></button>
        <button class="fa fa-compress" id="_btn-overview" data-toggle="fa fa-expand"></button>
    </div>
    <button class="fa fa-bars" id="_btn-bar"  data-toggle="fa fa-close"></button>
</div>
<script src="./js/mixjs/lib/mix.0.3.0.min.js"></script>
<script>
var base = location.protocol + '//' + location.host;

var path = location.pathname.split('/').filter(function(v){
    return !!v;
});
path.pop();
path = path.join('/');
MixJS.config({
    baseURL: [ base, path, 'js'].join('/')+'/'
});


MixJS.use('event/broadcast', function($){
    $.loadJS('nodeppt.js',function(){
        Slide.init({
            containerID: 'container',
            drawBoardID: 'drawBoard',
            slideClass: '.slide',
            buildClass: '.build',
            progressID: 'progress',
            transition: 'circle',
            width: 1100,
            dir: './',
            
            //打开下面的注释就开启postMessage方式
            //访问网址127.0.0.1:8080/ppt/demo#client
            control:{
                type: 'postMessage',
                args:{
                    isControl:  false
                }
            },
            
            tipID: 'tip'
        });
    }).loadJS('highlight/hljs-0.8.js',function(){
        hljs.tabReplace = '  ';
        hljs.initHighlightingOnLoad();
    });
});
</script>
<script src="./js/lizard.js"></script>
<link rel="stylesheet" href="./css/lizard.css">
</body>
</html>
